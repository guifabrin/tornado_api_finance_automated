# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait

from datetime import datetime

from app.models import Transaction
import time

def banco_do_brasil(agencia, conta, senha):
    transactions = []
    driver = webdriver.Chrome('./app/automated/chromedriver.exe')
    try:
        #driver.set_window_position(-10000,0)
        driver.get("https://www2.bancobrasil.com.br/aapf/login.html?1624286762470#/acesso-aapf-agencia-conta-1")
        WebDriverWait(driver, 5).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#dependenciaOrigem")))
        driver.find_element(By.ID, "dependenciaOrigem").send_keys(agencia)
        WebDriverWait(driver, 5).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#numeroContratoOrigem")))
        driver.find_element(By.ID, "numeroContratoOrigem").send_keys(conta)
        driver.find_element(By.ID, "botaoEnviar").click()
        WebDriverWait(driver, 5).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#senhaConta")))
        driver.find_element(By.ID, "senhaConta").send_keys(senha)
        driver.find_element(By.ID, "botaoEnviar").click()
        WebDriverWait(driver, 5).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".menu-completo > .menu-itens")))
        driver.execute_script("document.querySelector(\'[codigo=\"3469\"]\').click()")
        WebDriverWait(driver, 5).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#tabelaExtrato")))
        lines = driver.find_element(By.ID, "tabelaExtrato").find_elements_by_css_selector('tr')
        for line in lines:
            columns = line.find_elements_by_css_selector('td')
            if len(columns) >= 4:
                try:
                    dd, mm, yyyy = columns[0].get_attribute('innerText').split('/')
                    date = datetime.fromisoformat(yyyy + '-' + mm + '-' + dd)
                    valor, cd = columns[4].get_attribute('innerText').replace('.', '').replace(',', '.').split(' ')
                    cd = -1 if cd == 'D' else 1
                    valor = float(valor) * cd
                    transaction = Transaction()
                    transaction.value = valor
                    transaction.description = columns[2].get_attribute('innerText').replace("\n", " ")
                    transaction.date = date
                    if transaction.description not in ['Saldo Anterior']:
                        transactions.append(transaction)
                except:
                    pass
    except Exception as e:
        print('Error banco_do_brasil', e)
    driver.quit()
    return transactions

#


def banco_do_brasil_cc(agencia, conta, senha):
    transactions = []
    driver = webdriver.Chrome('./app/automated/chromedriver.exe')
    try:
        #driver.set_window_position(-10000,0)
        driver.get("https://www2.bancobrasil.com.br/aapf/login.html?1624286762470#/acesso-aapf-agencia-conta-1")
        WebDriverWait(driver, 5).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#dependenciaOrigem")))
        driver.find_element(By.ID, "dependenciaOrigem").send_keys(agencia)
        WebDriverWait(driver, 30000).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#numeroContratoOrigem")))
        driver.find_element(By.ID, "numeroContratoOrigem").send_keys(conta)
        driver.find_element(By.ID, "botaoEnviar").click()
        WebDriverWait(driver, 30000).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#senhaConta")))
        driver.find_element(By.ID, "senhaConta").send_keys(senha)
        driver.find_element(By.ID, "botaoEnviar").click()
        WebDriverWait(driver, 30000).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".menu-completo > .menu-itens")))
        driver.execute_script("document.querySelector(\'[codigo=\"3580\"]\').click()")
        WebDriverWait(driver, 30000).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#carousel-cartoes img")))
        cartoes = driver.find_elements(By.CSS_SELECTOR, "#carousel-cartoes img")
        i =-1
        for cartao in cartoes:
            try:
                i=i+1
                driver.execute_script("buscaFaturas("+str(i)+");")
                time.sleep(2)
                WebDriverWait(driver, 5).until(
                    expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".lancamentos")))
                lancamentos = driver.find_elements(By.CSS_SELECTOR, ".lancamentos")

                for lancamento in lancamentos:
                    lines = lancamento.find_elements_by_css_selector('tr')
                    for line in lines:
                        if line.get_attribute('innerText') is None:
                            continue
                        columns = line.find_elements_by_css_selector('td')
                        if len(columns) >= 4:
                            try:
                                dd, mm = columns[0].get_attribute('innerText').replace('\xa0', '').split('/')
                                date = datetime.fromisoformat(str(2021) + '-' + mm + '-' + dd)
                                valor = columns[4].get_attribute('innerText').replace('\xa0', '').replace('.', '').replace(',', '.')
                                valor = float(valor) * -1
                                transaction = Transaction()
                                transaction.value = valor
                                transaction.description = columns[1].get_attribute('innerText').replace('\xa0', '').replace("\n", " ")
                                transaction.date = date
                                transaction.paid = True
                                if transaction.description not in ['Saldo Anterior']:
                                    transactions.append(transaction)
                            except:
                                pass
            except:
                pass
    except Exception as e:
        print('Error banco_do_brasil_cc', e)
    driver.quit()
    return transactions

def caixa(usuario, senha):
    driver = webdriver.Chrome('./app/automated/chromedriver.exe')
    try:
        #driver.set_window_position(-10000,0)
        driver.get("https://internetbanking.caixa.gov.br/sinbc/#!nb/login")
        time.sleep(3)
        WebDriverWait(driver, 5000).until(expected_conditions.presence_of_element_located((By.ID, "nomeUsuario")))
        driver.find_element(By.ID, "nomeUsuario").send_keys(usuario)
        driver.find_element(By.ID, "btnLogin").click()
        time.sleep(3)
        WebDriverWait(driver, 5).until(
            expected_conditions.visibility_of_element_located((By.ID, "lnkInitials")))
        driver.find_element(By.ID, "lnkInitials").click()
        time.sleep(3)
        WebDriverWait(driver, 5).until(
            expected_conditions.visibility_of_element_located((By.ID, "password")))
        driver.execute_script("document.querySelector(\'#password\').value=\'"+senha.replace('\n','')+"\'")
        driver.find_element(By.ID, "btnConfirmar").click()
        time.sleep(5)
        driver.find_element(By.CSS_SELECTOR, "li:nth-child(1) .sup > .icone-menu").click()
        time.sleep(5)
        driver.find_element(By.LINK_TEXT, "Extrato").click()

        time.sleep(5)
        lines = driver.find_element(By.CSS_SELECTOR, ".movimentacao").find_elements_by_css_selector('tr')

        transactions = []
        for line in lines:
            columns = line.find_elements_by_css_selector('td')
            if len(columns) >= 4:
                try:
                    dd, mm, yyyy = columns[0].get_attribute('innerText').split('/')
                    date = datetime.fromisoformat(yyyy + '-' + mm + '-' + dd)
                    valor, cd = columns[3].get_attribute('innerText').replace('.', '').replace(',', '.').split(' ')
                    cd = -1 if cd == 'D' else 1
                    valor = float(valor) * cd
                    transaction = Transaction()
                    transaction.value = valor
                    transaction.description = columns[2].get_attribute('innerText').replace("\n", " ")
                    transaction.date = date
                    if transaction.description not in ['Saldo Anterior']:
                        transactions.append(transaction)
                except:
                    pass
    except Exception as e:
        print('Error caixa', e)
    driver.quit()
    return transactions